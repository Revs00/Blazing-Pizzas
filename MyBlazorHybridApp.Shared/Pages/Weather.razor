@page "/weather"

<PageTitle>Weather</PageTitle>

<h1>Weather Forecast</h1>

<p>This component shows weather data with chart visualization.</p>

@if (forecasts == null)
{
    <p><em>Loading data...</em></p>
}
else
{
    <div class="row">
        <div class="col-7">
            <table class="table table-striped"> 
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr>
                            <td>@forecast.Date.ToShortDateString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.Summary</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="col-5">
            <RadzenChart Style="height:300px;">
                <RadzenLineSeries Data="@forecasts" CategoryProperty="Date" ValueProperty="TemperatureC" Title="Temp (°C)" />
                <RadzenLineSeries Data="@forecasts" CategoryProperty="Date" ValueProperty="TemperatureF" Title="Temp (°F)" />
                <RadzenCategoryAxis FormatString="{0:dd MMM}" />
            </RadzenChart>
        </div>
    </div>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulasi async loading
        await Task.Delay(800);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };

        // Generate data dummy
        forecasts = Enumerable.Range(1, 7).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-10, 40),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
